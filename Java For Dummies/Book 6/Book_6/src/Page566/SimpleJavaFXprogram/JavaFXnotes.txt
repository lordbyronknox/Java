Stage (window) -> Scene (?) -> Pane -> Controls
(every stage must have a scene).

---------------------------------------------------------------------------------
STAGE

Represented by the Stage class.
Top most container in which a javaFx user interface appears. 
(eg In Windows/Mac it is a window. On a smartphone it is usually the full screen)
When a JavaFx application is launched, a stage (known as 'primary stage') is created...
and passed to the start() method as a parameter. 
eg.  start(primaryStage)
The stage houses the scene, which contains the controls and/or other user-interface node.

COMMONLY USED METHODS OF THE STAGE CLASSES
void close()                         Closes the stage.
void initModality(Modality modality) Sets the modality of the stage. This method must be called 
 (modality: the mode of something)   before the show method is called. 
                                     The modality can be one of the following:
                                     Modality.NONE
                                     Modality.APPLICATION_MODAL
                                     Modality.WINDOW_MODAL
void initStyle(StageStyle style)     Sets the style for the stage. This method must be called
                                     before the show method is called. 
                                     The style can be one of the following:
                                     StageStyle.DECORATED
                                     StageStyle.UNDECORATED
                                     StageStyle.TRANSPARENT
                                     StageStyle.UNIFIED
                                     StageStyle.UTILITY
void getMaxHeight(double maxheight)    Gets the maximum height for the stage.
void getMaxWidth(double maxwidth)      Gets the maximum width for the stage.
void getMinHeight(double maxheight)    Gets the minimum height for the stage.
void getMinWidth(double maxwidth)      Gets the minimum width for the stage.
void setFullScreen(boolean fullscreen) Sets the fullscreen status of the stage.
                                       (full screen, with no buttons/title bar. Has 'exit full screen message)
void setIconified(boolean iconified)   Sets the iconified status of the stage. (minimized to icon)
void setMaximized(boolean maximized)   Sets the maximized status of the stage. 
                                       (full screen with title bar, restore, minimize and close buttons) 
void setMaxHeight(double maxheight)    Sets the maximum height for the stage.
void setMaxWidth(double maxwidth)      Sets the maximum width for the stage.
void setMinHeight(double maxheight)    Sets the minimum height for the stage.
void setMinWidth(double maxwidth)      Sets the minimum width for the stage.
void setResizable(boolean resizable)   Sets the fullscreen status of the stage.
void setScene(Scene scene)             Sets the scene to be displayed on the stage.
void setTitle(String title)            Sets the title to be displayed in the stage’s title bar, if a
                                       title bar is visible.
void show()                            Makes the stage visible.
void showAndWait()                     Makes the stage visible and then waits until the stage is
                                       closed before continuing.
void toFront()                         Forces the stage to the foreground.
void toBack()                          Forces the stage to the background.

---------------------------------------------------------------------------------

SCENE

Every JavaFX application uses one or more Scene objects to hold the user interface controls.

Commonly Used Constructors and Methods of the Scene class:

Constructor                 Description
Scene(Parent root)          Creates a new scene with the specified root node
Scene(Parent root, double width, double height)   Creates a new scene with the specified root node,
                                                  width, and height.

Method                      Description
double getHeight()          Gets the height of the scene
double getWidth()           Gets the width of the scene
double getX()               Gets the horizontal position of the scene
double getY()               Gets the vertical position of the screen
void setRoot(Parent root)   Sets the root node


---------------------------------------------------------------------------------

CREATING AN ALERT BOX
Display a basic message box using the Alert class (similar to the JOptionPane class)

Commonly Used Constructors and Methods of the Alert class:
Constructor                 Description
Alert(Alert.AlertType)      Creates a new alert of the specified type

Alert(Alert.AlertType, String text)  
                            Creates a new alert of the specified type and sets the message text.

Alert(Alert.AlertType, String text, ButtonType type...)  
                            Creates a new alert and sets the buttons to be displayed.

Method                              Description
void setTitle(String text)          Sets the title
Optional<ButtonType> showAndWait()  Shows the alert and waits for the user’s response, which is 
                                    returned as a ButtonType object.


The AlertType parameter lets you specify one of several types of Alert dialogs:
»» AlertType.CONFIRMATION, which prompts the user to confirm an action.
»» AlertType.ERROR, which display an error message.
»» AlertType.INFORMATION, which displays an information dialog box.
»» AlertType.WARNING, which displays a warning message.
»» AlertType.NONE, which display a generic alert dialog.

You can control what buttons appear on the Alert box by using the optional
ButtonType parameter. You can choose from among the following types of buttons:
»» ButtonType.APPLY
»» ButtonType.CANCEL
»» ButtonType.CLOSE
»» ButtonType.FINISH
»» ButtonType.NEXT
»» ButtonType.NO
»» ButtonType.OK
»» ButtonType.PREVIOUS
»» ButtonType.YES

eg. snippet:

Alert a = new Alert(Alert.AlertType.INFORMATION, "Are you certain?", ButtonType.YES, ButtonType.NO);

In this example, the Alert box will include both a YES and a NO button.
To determine which button the user clicked you must test the value returned by the
'showAndWait()' method. This value is an object of type 'Optional' (since the user can close the
dialog box without clicking the buttons)
Test whether the user clicked a button by calling the 'isPresent()' method.
Then call the 'get()' method to retrieve the actual result.
eg.
    Alert a = new Alert(Alert.AlertType.INFORMATION, "Are you certain?", ButtonType.YES, ButtonType.NO);
    Optional<ButtonType> r = a.showAndWait();
    if (r.isPresent() && r.get() == ButtonType.YES)
    {
        // The user clicked OK!
    }


---------------------------------------------------------------------------------

WORKING WITH LAYOUT PANES

Layout panes are special classes that determine where each component/node appear in it's frame/panel.
Their sole purpose is to control the arrangement of nodes that appear in a scene.

Here are 5 JavaFX layout panes:
HBox:     arranges nodes horizontally (one next to the other in rows)
VBox:     arranges nodes vertically (one on top of the other in columns)
FlowPane: arranges nodes next to each other, until it runs out of space. Then it
          wraps/starts at next row/column. (can be configured to arrange in rows or columns)
Border:   Divides the pane into 5 regions, Top, Left, Center, Right, Bottom.
          When you add nodes you can specify the region you would like them placed.
GridPane: Divides the pane into a grid, letting you control the arrangement in rows & columns.


Creating layout panes:
1. Create the controls or other nodes you want to add to the pane.
   (eg. create the buttons, set their texts, .setOnAction())
2. Create a layout pane
   eg,   HBox pane = new HBox();
3. Fine-Tune the optional settings used by the layout pane.
   eg   ...new HBox(10);     ->creates a 10 pixel space between controls.
4. Add each of the nodes that will appear in the layout pane.
   Note: you must first call .getChildren() to get a list of all nodes that have been created,
   and then add the nodes by calling addAll(<node1>, <node2>)
   eg.  pane.getChildren().addAll(btnOK, btnCancel);
5. Create a scene, specifying the layout pane as the scene's root node.
   eg.  Scene scene = new Scene(pane, 300, 300);

Combining layout panes: (nodes within nodes).
You can combine layout panes by creating placing various panes inside a pane.
eg. You could have two VBox panes, one on the left and one on the right, inside a
    Border pane. 


HBox Layout
[Arranges nodes in a horizontal row]
The easiest way to create a HBox is to first create the nodes, and then create the
HBox, passing the nodes as arguments.
eg.     Button btn1 = new Button("Button 1");
        Button btn2 = new Button("Button 2");
        Hbox hbox = new HBox(btn1, btn2);


HBox Constructors and Methods:
Constructor             Description
HBox()                  Creates an empty HBox.
HBox(double spacing)    Creates an empty HBox with the specified spacing.
HBox(Node... children)  Creates an HBox with the specified child nodes. This constructor lets
                        you create an HBox and add child nodes to it at the same time.
HBox(double spacing, Node... children)    Creates an HBox with the specified spacing and child nodes.

Method                                  Description
ObservableList<Node> getChildren()      Returns the collection of all child nodes that have been added 
                                        to the HBox. The collection is returned as an ObservableList type, 
                                        which includes the method addAll, letting you add one or more 
                                        nodes to the list.
static void setAlignment(Pos alignment)                 Sets the alignment for child nodes within the HBox.
static void setHgrow(Node child, Priority priority)     Sets the growth behavior of the given child node.
static void setMargin(Node child, Insets value)         Sets the margins for a given child node. 
void setPadding(Insets value)           Sets the padding around the inside edges of the Hbox.
void setSpacing(double value)           Sets the spacing between nodes displayed within the HBox.

----
The Pos enumeration:
Constant            Vertical Alignment      Horizontal Alignment
Pos.TOP_LEFT        Top                     Left
Pos.TOP_CENTER      Top                     Center
Pos.TOP_RIGHT       Top                     Right
Pos.CENTER_LEFT     Center                  Left
Pos.CENTER          Center                  Center
Pos.CENTER_RIGHT    Center                  Right
Pos.BOTTOM_LEFT     Bottom                  Left
Pos.BOTTOM_CENTER   Bottom                  Center
Pos.BOTTOM_RIGHT    Bottom                  Right
Pos.BASELINE_LEFT   Baseline                Left
Pos.BASELINE_CENTER Baseline                Center
Pos.BASELINE_RIGHT  Baseline                Right
----

SPACING
You can also provide spacing as a parameter:
NOTE: this only provides spacing between the nodes, not the perimeter.
        Hbox hbox = new HBox(10, btn1, btn2);

Or add spacing afterwards:
        HBox.setSpacing(10);

Add spacing around the perimeter of the layout pane:
USe .setPadding(), which takes an Inserts object as the parameter.
Insert() represents the size of the padding from each of the corners of the pane.
        hbox.setPadding(new Inserts(10));               //uniform padding of 10 pixels
        hbox.setPadding(new Insert(20, 10, 20, 10));    //set different padding for each edge.
                                                          Top and Bottom = 20
                                                          Left and Right = 10

Add spacing with Margins:
You can also create margins around each node, which allows you to set different margin
size for each node in a layout pane.
.setMargin(<node>, <Insets object>)
        hbox.setMargin(btn1, new Insets(10));

Add spacing by Growing Nodes.
Yo can create a node who's sole purpose is to is to add space between nodes.
* Here you create a spacer object (like a button)...
* Configure the spacer by calling the static HBox.setHgrow() method and pass the spacer as the first arg,
  and PRIORITY as the second arg.
* You then create the layout pane and add the spacer to the pane as you would a button.

PRIORITY ENUM:
Priority.NEVER  Indicates that the width of the node should never be adjusted to fill the available
                space in the pane. This is the default setting. Thus, by default, nodes are not
                resized based on the size of the layout pane that contains them.
Priority.ALWAYS Indicates that the width of the node should always be adjusted if necessary to
                fill available space in the pane. If you set two or more nodes to ALWAYS, the
                adjustment will be split equally among each of the nodes.
Priority.SOMETIMES Indicates that the node’s width may be adjusted if necessary to fill out the pane.
                However, the adjustment will be made only if there are no other nodes that specify ALWAYS.

        Region spacer = new Region();          //create the spacer
        HBox.setHgrow(spacer, PRIORITY.ALWAYS)  //pass spacer and PRIORITY enum to .setHgrow().
        HBox hbox = new HBox(10, btn1, btn2, spacer, btn3);     //add btns & spacer to layout pane.




USING THE VBOX LAYOUT
Same as HBox.

Differences:
.setVgrow()
VBox()  (constructor)
.setAlignment(Pos.CENTERED)



--------------------------------------------------------------------------------
MAKING NODES THE SAME WIDTH

You can set the width of a button using the .setMaxWidth() method,
which takes a Double enum as an arg.
eg. 
If you have three buttons of different widths you can do the following
which will set the width of each button to the width of the widest button:
    btn1.setMaxWidth(Double.MAX-VALUE);
    btn2.setMaxWidth(Double.MAX-VALUE);
    btn3.setMaxWidth(Double.MAX-VALUE);

--------------------------------------------------------------------------------
USING THE FLOW LAYOUT

Constructors and Most common methods:

Constructor                         Description
FlowPane()                          Creates an empty horizontal flow layout with both the
                                    horizontal and vertical gaps set to zero.
FlowPane(double hgap, double vgap)  Creates an empty horizontal flow layout with the
                                    specified horizontal and vertical gaps.
FlowPane(double hgap, double vgap, Node... children)
Creates a horizontal flow layout with the specified horizontal and vertical gaps and populated with the
specified child nodes.
FlowPane(Node... children)          Creates a horizontal flow layout with both the horizontal
                                    and vertical gaps set to zero and populated with the specified child nodes.

Note: In each of the following constructors, Orientation can be Orientation.HORIZONTAL or
Orientation.VERTICAL.
FlowPane(Orientation orientation)   Creates an empty flow layout with the specified
                                    orientation and both the horizontal and vertical gaps set to zero.

FlowPane(Orientation orientation, double hgap, double vgap)
Creates an empty flow layout with the specified orientation and the specified horizontal and vertical gaps.

FlowPane(Orientation orientation, double hgap, double vgap, Node... children)
Creates a flow layout with the specified orientation and horizontal and vertical gaps, populated with the
specified children.

FlowPane(Orientation orientation, Node... children)
Creates a flow layout with the specified orientation and both the horizontal and vertical gaps set to zero,
populated with the specified children.

Method                                  Description
ObservableList<Node> getChildren()      Returns the collection of all child nodes. The collection is
                                        returned as an ObservableList type, which includes the method 
                                        addAll, letting you add one or more nodes to the list.
void setAlignment(Pos alignment)        Sets the alignment for nodes within the rows and columns.
void setColumnAlignment(Pos alignment)  Sets the alignment for nodes within the columns.


--------------------------------------------------------------------------------
USING THE BRORDERPANE LAYPOUT

Constructors and most common methods:

Constructor                 Description
BorderPane()                Creates an empty border layout.
BorderPane (Node center)    Creates a border layout with the specified center node.
BorderPane (Node center, Node top, Node right, Node bottom, Node left)
Creates a border layout with the specified center, top, right, bottom, and left nodes.

Method                      Description
void setCenter(Node node)   Sets the center node.
void setTop(Node node)      Sets the top node.
void setRight(Node node)    Sets the right node.
void setBottom(Node node)   Sets the bottom node.
void setLeft(Node node)     Sets the left node.
void setAlignment(Pos alignment)                  Sets the alignment for nodes within border pane.
static void setMargin(Node child, Insets value)   Sets the margins for a given child node.

eg.
        VBox vbox = new VBox(btn1, btn2, btn3);  //VBox created & buttons added
        BorderPane pane = new BorderPane();      //BorderPane layout created
        pane.setCenter(vbox);                    //vbox added to the center of the BorderPane.

        OR
        You can add add panes (that already exist) like this:
        BorderPane pane = new BorderPane(myCenter, myTop, myRight, myBottom, my Left);

NOTE: If you dont add a pane to a region that pane is not rendered.
      The regions are sized according to their content.
      If the user expands the window sideways, the top, center and bottom regions expand.
      If the user expands the window vertically the left, center and right expand.
      The nodes you add to the regions of a BorderPane will almost always be other layout panes.



--------------------------------------------------------------------------------
THE GRIDPANE LAYOUT

Pane arranged in a grid (rows and columns).
You can specify which cell you want each component to appear.
You can create components that span multiple rows or columns.
You can stretch the component to fill the cell. (horizontally, vertically or both).
You can specify the component's position within it's cell (centered, left etc.)

SKETCH OUT A PLAN:
Before you create a grid pane, draw a sketch showing how you want the components to appear
in the panel.
Then draw rows and columns around the components and number each cell - starting with
0 for both the row and column in the top left corner.
After that list out each component, the x (row) number, y (column) number, Alignment, and span.
eg.
Component         x   y   Alignment Spans
Label "Name"      0   0   Right
Label "Phone"     0   1   Right
Label "Address"   0   2   Right
Name text field   1   0   Left      2
Phone text field  1   1   Left      2

Then you can write the code to put each component in its proper place.

CREATING A GRID PANE.
eg.
    Label lblName = new Label("Name");      //create a label.
    GridPane grid = new GridPane();         //create a GridPane;
    grid.add(lblName, 0, 0);                //add the label to top left cell.

    grid.addRow(0, btn1, btn2);             //adding an entire row.
eg. 
    grid.setColumnSpan(btn, 2);             //spans the button over two colums.
    grid.setRowSpan(btn, 2);                //...over two rows.



--------------------------------------------------------------------------------
CHOOSING FROM A LIST

Choice boxes:
- a control that lets you choose an item from a drop down list.
- Uses the ChoiceBox class to create a choicebox.

ChoiceBox<String> choice = new ChoiceBox<String>();     //create the box
choice.getItems().add("Happy");                         //add an item
choice.getItems()addAll("Sneezy", "Dopey");             //add multiple items.
choice.getItems().remove("Dopey");                      //remove an item.
choice.getItems().addAll(list);                         //add a collection of items.


Listening for selection changes:
Often you would like your program to respond immediately when the user makes a change,
and not only when he presses the OK button. 
Because list controls dont generate an action event when clicked the ChoiceBox class doesnt have a
setOnAction() method.
So you must set up a 'change listener' as follows:
1. Get selection model -        getSelectionModel()
2. Get selectedItem property -  selectedItemProperty()
3. Add a change listener -      addListener(v, oldValue, newValue)
                                v = property whose value has changed
                                oldvalue = previous value of property
                                newValue = new value of property
eg.
    choice.getSelectionModel().selectedItemProperty()
    .addListener( (v, oldValue, newValue) -> lbl.setText(newValue); );      //lambda used to call setText()



COMBO BOXES:
Same as choice box, but a bit more advanced:
- lets you choose the number of items displayed when the list is show. 
  (adds a scroll bar to scroll further down the list)
- Includes a text field, allowing the user to enter the value rather than selecting it from the list.
- Fires an action event when the user changes the selection. (making setting up an action event easier)

ComboBox<String> cbox = new ComboBox<String>();     //create a combo box
cbox.getItems().addAll("Bashful", "Doc", "Dopey");  //add items
cbo.setEditable(true);                              //change the ability of the user to edit the list.
cbo.setVisibleRows(10);                             //limit the number of items displayed
cbo.setPromptText("Make a choice");                 //set default text to be displayed in text field.

Getting the selected item by calling .getValue():
(Typically done in the event handler)
eg.
    public void btnOK_Click()
    {
        String message = "You chose ";
        message += cbo.getValue();
        Alert a = new Alert(Alert.AlertType.INFORMATION, msg);
        a.setTitle("Your Choice");
        a.showAndWait();
    }

OR... use the .contains() method to see if the selection is from the list, or not (i.e. a string 
entered by the user instead of selected from the list). 



LIST VIEWS
Displays a list of objects within a box.  Can select one of more item, depending on configuration.
As with combo box, a scroll is added if list extends past view.
Differs from combo box:
- no text field for the user to edit the selection.
- Does not drop down. (displayed in a box whose size you specify).
- Items can be arranged vertically or horizontally.
- Can select more than one item by holding control + clicking selected items.


ListView list = new ListView();                     //create a ListView object.
list.getItems().addAll("Sausage", "Pepperoni");     //add to listview
list.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);  //allows multiple selections
list.setOrientation(Orientation.HORIZONTAL);        //set list to HORIZONTAL.
toppings = list.getSelectionModel().getSelectedItems();  //get selected items.


TREE VIEWS
Displays items in a tree view (similar to the folder structure on your computer)

Node: 
    Each element in the tree is a node. Each node in a tree is created from
    TreeItem class. The TreeItem class is a generic class, so you can associate a
    type with it. Thus, you can create a tree using objects of any type you wish,
    including types you create yourself.
Root node: 
    A root node is the starting node for a tree. Every tree must have
    one — and only one — root node. When you create a tree component, you
    pass the root node to the TreeView constructor.
Child node: 
    The nodes that appear immediately below a given node are that node’s child nodes. 
    A node can have more than one child.
Parent node: 
    The node immediately above a given node is that node’s parent
    node. Every node except the root node must have one — and only one — parent.
Sibling nodes: 
    Sibling nodes are children of the same parent.
Leaf node: 
    A leaf node is one that doesn’t have any children.
Path: 
    A path contains the node and all its ancestors — that is, its parent, its
    parent’s parent, and so on — all the way back to the root.
Expanded node: 
    An expanded node is one whose children are visible.
Collapsed node: 
    A collapsed node is one whose children are hidden.


